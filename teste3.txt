Using TcpListener, we can listen for TCP connections at the address 127.0.0.1:7878. In the address, 
the section before the colon is an IP address representing your computer (this is the same on every 
computer and doesn’t represent the authors’ computer specifically), and 7878 is the port. We’ve chosen 
this port for two reasons: HTTP isn’t normally accepted on this port so our server is unlikely to conflict 
with any other web server you might have running on your machine, and 7878 is rust typed on a telephone.

The bind function in this scenario works like the new function in that it will return a new TcpListener 
instance. The function is called bind because, in networking, connecting to a port to listen to is known as “binding to a port.”

The bind function returns a Result<T, E>, which indicates that it’s possible for binding to fail. 
For example, connecting to port 80 requires administrator privileges (nonadministrators can listen only on ports higher than 1023), 
so if we tried to connect to port 80 without being an administrator, binding wouldn’t work. Binding also wouldn’t work, for example, 
if we ran two instances of our program and so had two programs listening to the same port. Because we’re writing a basic server just for 
learning purposes, we won’t worry about handling these kinds of errors; instead, we use unwrap to stop the program if errors happen.

The incoming method on TcpListener returns an iterator that gives us a sequence of streams (more specifically, streams of type TcpStream). 
A single stream represents an open connection between the client and the server. A connection is the name for the full request and response 
process in which a client connects to the server, the server generates a response, and the server closes the connection. 
As such, we will read from the TcpStream to see what the client sent and then write our response to the stream to send data back to the client. 
Overall, this for loop will process each connection in turn and produce a series of streams for us to handle.

For now, our handling of the stream consists of calling unwrap to terminate our program if the stream has any errors; 
if there aren’t any errors, the program prints a message. We’ll add more functionality for the success case in the next listing.
 The reason we might receive errors from the incoming method when a client connects to the server is that we’re not actually iterating over connections. 
 Instead, we’re iterating over connection attempts. The connection might not be successful for a number of reasons, many of them operating system specific. 
 For example, many operating systems have a limit to the number of simultaneous open connections they can support;
 new connection attempts beyond that number will produce an error until some of the open connections are closed.